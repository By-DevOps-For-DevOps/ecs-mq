AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  Tag:
    Type: String
    Description: Tag of the Docker Image.
    Default: IMAGE_TAG
  EnvironmentName:
    Type: String
    Description: Name of the Environment.
    Default: ENVIRONMENT_NAME
  ServiceMaxCapacity:
    Description: 'The maximum number of simultaneous tasks, that you want to run on the cluster.'
    Type: Number
    Default: 5
    ConstraintDescription: 'Must be >= 1'
    MinValue: 1
  ServiceMinCapacity:
    Description: 'The minimum number of simultaneous tasks, that you want to run on the cluster.'
    Type: Number
    Default: 2
    ConstraintDescription: 'Must be >= 1'
    MinValue: 1
  Email:
    Type: String
    Description: Email address to notify when an API activity has triggered an alarm
    Default: EMAIL
  ECSRepositoryName:
    Type: String
    Description: 'ECS Repository Name'
    Default: ECS_REPOSITORY_NAME

Resources:
  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      #The Family name will be used along with ECS_CLUSTER_NAME to prepare the stack name. It should be of Format abb-cdd-sd
      Family: APP_NAME-BUILD_SCOPE
      Cpu: ECS_CPU_COUNT
      Memory: ECS_MEMORY_RESERVATION_COUNT
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue: !Sub '${EnvironmentName}-ECSTaskExecutionRoleArn'
      # TODO: too much power for the task
      TaskRoleArn:
        Fn::ImportValue: !Sub '${EnvironmentName}-ECSTaskExecutionRoleArn'
      ContainerDefinitions:
      - Name: xray-sidecar
        # TODO: it is expected that you have xray-daemon in your ECR
        Image: "amazon/aws-xray-daemon:3.2.0"
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'ContainerLogGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: !Sub "${EnvironmentName}-APP_NAME"
      - Name: APP_NAME
        Essential: 'true'
        Image:
          "Fn::Sub":
            - '${AccountId}.dkr.ecr.${Region}.amazonaws.com/${ECSRepositoryName}:TAG'
            - { AccountId: { "Ref" : "AWS::AccountId" }, Region: { "Ref" : "AWS::Region" }}
        Ulimits:
          - Name: nofile
            SoftLimit: 2048
            HardLimit: 8192
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'ContainerLogGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: !Sub "${EnvironmentName}-APP_NAME"
        Environment:
ENVIRONMENT_VARIABLES

  ContainerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${EnvironmentName}-APP_NAME"
      RetentionInDays: 14

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue: !Sub '${EnvironmentName}-ECSCluster'
      LaunchType: FARGATE
      DesiredCount: DESIRED_COUNT
      TaskDefinition: !Ref 'TaskDefinition'
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Fn::ImportValue: !Sub '${EnvironmentName}-ECSHostSecurityGroup'
          Subnets:
            - Fn::ImportValue: !Sub '${EnvironmentName}-PrivateSubnet1'
            - Fn::ImportValue: !Sub '${EnvironmentName}-PrivateSubnet2'

  ScalableTargetRole: # based on http://docs.aws.amazon.com/AmazonECS/latest/developerguide/autoscale_IAM_role.html
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'application-autoscaling.amazonaws.com'
          Action: 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: ecs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ecs:DescribeServices'
            - 'ecs:UpdateService'
            Resource: '*'
      - PolicyName: cloudwatch
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'cloudwatch:DescribeAlarms'
            Resource: '*'
  ScalableTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      MaxCapacity: !Ref ServiceMaxCapacity
      MinCapacity: !Ref ServiceMinCapacity
      ResourceId: !Sub
        - 'service/${Cluster}/${Service}'
        - Cluster:
            'Fn::ImportValue': !Sub '${EnvironmentName}-ECSCluster'
          Service: !GetAtt 'Service.Name'
      RoleARN: !GetAtt 'ScalableTargetRole.Arn'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs
  ScaleUpPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-up'
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 300
        MinAdjustmentMagnitude: 1
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 25
  ScaleDownPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-down'
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 300
        MinAdjustmentMagnitude: 1
        StepAdjustments:
        - MetricIntervalUpperBound: 0
          ScalingAdjustment: -25
  CPUUtilizationHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Service is running out of CPU'
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value:
          Fn::ImportValue: !Sub '${EnvironmentName}-ECSCluster'
      - Name: ServiceName
        Value: !GetAtt 'Service.Name'
      MetricName: CPUUtilization
      ComparisonOperator: GreaterThanThreshold
      Statistic: Average
      Period: 60
      EvaluationPeriods: 5
      Threshold: 80
      AlarmActions:
      - !Ref ScaleUpPolicy
  CPUUtilizationLowAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Service is wasting CPU'
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value:
          Fn::ImportValue: !Sub '${EnvironmentName}-ECSCluster'
      - Name: ServiceName
        Value: !GetAtt 'Service.Name'
      MetricName: CPUUtilization
      ComparisonOperator: LessThanThreshold
      Statistic: Average
      Period: 60
      EvaluationPeriods: 5
      Threshold: 20
      AlarmActions:
      - !Ref ScaleDownPolicy
  MemoryUtilizationHighAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'Service is running out of memory'
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value:
          Fn::ImportValue: !Sub '${EnvironmentName}-ECSCluster'
      - Name: ServiceName
        Value: !GetAtt 'Service.Name'
      MetricName: MemoryUtilization
      ComparisonOperator: GreaterThanThreshold
      Statistic: Average
      Period: 60
      EvaluationPeriods: 5
      Threshold: 80
      AlarmActions: [!Ref 'ScaleUpPolicy']
  MemoryUtilizationLowAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'Service is wasting memory'
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value:
          Fn::ImportValue: !Sub '${EnvironmentName}-ECSCluster'
      - Name: ServiceName
        Value: !GetAtt 'Service.Name'
      MetricName: MemoryUtilization
      ComparisonOperator: LessThanThreshold
      Statistic: Average
      Period: 60
      EvaluationPeriods: 5
      Threshold: 20
      AlarmActions: [!Ref 'ScaleDownPolicy']
  AlarmNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'APP_NAME-topic-${EnvironmentName}'
  AlarmNotificationSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: EMAIL
      Protocol: email
      TopicArn:
        Ref: AlarmNotificationTopic
Outputs:
  ecsservice:
    Value:
      Ref: Service
